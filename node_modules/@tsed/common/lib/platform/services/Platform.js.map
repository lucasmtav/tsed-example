{"version":3,"file":"Platform.js","sourceRoot":"","sources":["../../../src/platform/services/Platform.ts"],"names":[],"mappings":";;;;AAAA,iCAAiG;AAEjG,oFAA+E;AAE/E,yEAAoE;AAEpE,+DAA0D;AAC1D,qDAAgD;AAEhD;;;;GAIG;AAIH,IAAa,QAAQ,GAArB,MAAa,QAAQ;IAGnB,YAAqB,QAAyB,EAAW,mBAAwC;QAA5E,aAAQ,GAAR,QAAQ,CAAiB;QAAW,wBAAmB,GAAnB,mBAAmB,CAAqB;QAFzF,YAAO,GAAuB,EAAE,CAAC;IAE2D,CAAC;IAErG,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,4BAA4B;QACjC,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QAExB,OAAO,QAAQ;aACZ,YAAY,CAAC,iBAAY,CAAC,UAAU,CAAC;aACrC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE;gBACzB,OAAO,IAAI,qDAAyB,CAAC,QAA8B,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACtF;QACH,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,gBAAqB,EAAE;QACzC,OAAO,+BAAc,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IAEM,SAAS,CAAC,MAAgB;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YAC/B,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,QAAgB,EAAE,KAAoB;QACpD,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QAExB,IAAI,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC/B,MAAM,QAAQ,GAAuB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAS,CAAC;YAEzE,IAAI,QAAQ,CAAC,IAAI,KAAK,iBAAY,CAAC,UAAU,EAAE;gBAC7C,MAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAEhD,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE;oBACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAChB,KAAK;wBACL,QAAQ;qBACT,CAAC,CAAC;oBACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBACpE;aACF;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,IAAI,MAAM,GAA2B,EAAE,CAAC;QAExC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAqD,EAAE,EAAE;YAC5E,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACK,WAAW,CAAC,WAAmB,EAAE,IAAwB;QAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QAExB,IAAI,MAAM,GAA2B,EAAE,CAAC;QAExC,IAAI,CAAC,QAAQ;aACV,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACzC,OAAO,CAAC,CAAC,QAA4B,EAAE,EAAE;YACxC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAA0B,EAAE,EAAE;YACpD,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE;gBACjD,IAAI,MAAM,EAAE;oBACV,MAAM,CAAC,IAAI,CACT,IAAI,2CAAoB,CAAC;wBACvB,QAAQ;wBACR,MAAM;wBACN,GAAG,EAAE,GAAG,WAAW,GAAG,IAAI,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;qBAC1D,CAAC,CACH,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA/GY,QAAQ;IAHpB,eAAU,CAAC;QACV,KAAK,EAAE,kBAAa,CAAC,SAAS;KAC/B,CAAC;6CAI+B,oBAAe,EAAgC,yCAAmB;GAHtF,QAAQ,CA+GpB;AA/GY,4BAAQ","sourcesContent":["import {Injectable, InjectorService, ProviderScope, ProviderType, TokenProvider} from \"@tsed/di\";\nimport {EndpointMetadata} from \"../../mvc\";\nimport {PlatformControllerBuilder} from \"../builder/PlatformControllerBuilder\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {PlatformRouteDetails} from \"../domain/PlatformRouteDetails\";\nimport {IRoute, IRouteController} from \"../interfaces/IRoute\";\nimport {PlatformApplication} from \"./PlatformApplication\";\nimport {PlatformRouter} from \"./PlatformRouter\";\n\n/**\n * `Platform` is used to provide all routes collected by annotation `@Controller`.\n *\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class Platform {\n  private _routes: IRouteController[] = [];\n\n  constructor(readonly injector: InjectorService, readonly platformApplication: PlatformApplication) {}\n\n  get app() {\n    return this.platformApplication;\n  }\n\n  get routes(): IRouteController[] {\n    return this._routes || [];\n  }\n\n  /**\n   * Create routers from the collected controllers\n   */\n  public createRoutersFromControllers() {\n    const {injector} = this;\n\n    return injector\n      .getProviders(ProviderType.CONTROLLER)\n      .map((provider) => {\n        if (!provider.hasParent()) {\n          return new PlatformControllerBuilder(provider as ControllerProvider).build(injector);\n        }\n      })\n      .filter(Boolean);\n  }\n\n  /**\n   * Create a new instance of PlatformRouter\n   * @param routerOptions\n   */\n  public createRouter(routerOptions: any = {}): PlatformRouter {\n    return PlatformRouter.create(this.injector, routerOptions);\n  }\n\n  public addRoutes(routes: IRoute[]) {\n    routes.forEach((routeSettings) => {\n      this.addRoute(routeSettings.route, routeSettings.token);\n    });\n  }\n\n  public addRoute(endpoint: string, token: TokenProvider) {\n    const {injector} = this;\n\n    if (injector.hasProvider(token)) {\n      const provider: ControllerProvider = injector.getProvider(token)! as any;\n\n      if (provider.type === ProviderType.CONTROLLER) {\n        const route = provider.getEndpointUrl(endpoint);\n\n        if (!provider.hasParent()) {\n          this._routes.push({\n            route,\n            provider\n          });\n          this.app.use(route, ...[].concat(provider.getRouter().callback()));\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {PlatformRouteDetails[]}\n   */\n  public getRoutes(): PlatformRouteDetails[] {\n    let routes: PlatformRouteDetails[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      routes = routes.concat(this.buildRoutes(config.route, config.provider));\n    });\n\n    return routes;\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(endpointUrl: string, ctrl: ControllerProvider): PlatformRouteDetails[] {\n    const {injector} = this;\n\n    let routes: PlatformRouteDetails[] = [];\n\n    ctrl.children\n      .map((ctrl) => injector.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => {\n        routes = routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));\n      });\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      endpoint.operationPaths.forEach(({path, method}) => {\n        if (method) {\n          routes.push(\n            new PlatformRouteDetails({\n              endpoint,\n              method,\n              url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\")\n            })\n          );\n        }\n      });\n    });\n\n    return routes;\n  }\n}\n"]}