{"version":3,"file":"ValidationPipe.js","sourceRoot":"","sources":["../../../src/mvc/pipes/ValidationPipe.ts"],"names":[],"mappings":";;;;AAAA,qCAAkC;AAClC,iCAAqD;AACrD,mDAA8C;AAC9C,yCAA2C;AAC3C,+EAA0E;AAE1E,qDAAgD;AAKhD,IAAa,cAAc,GAA3B,MAAa,cAAc;IAGzB,YAAY,QAAyB;QACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,aAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,YAAY,CAAC,CAAC;QAErG,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;SACvD;IACH,CAAC;IAED,WAAW,CAAC,KAAU,EAAE,QAAuB;QAC7C,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,KAAK,KAAK,MAAM,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,IAAI;gBACF,OAAO,yBAAW,CAAC,KAAK,EAAE;oBACxB,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB,CAAC,CAAC;aACJ;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,KAAK,CAAC;aACd;SACF;QAED,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC,KAAU,EAAE,QAAuB;QACtC,OAAO,QAAQ,CAAC,SAAS,KAAK,uBAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAU,EAAE,QAAuB;QACjD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACtC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE1C,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEtC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE;YACnC,MAAM,EAAE,sBAAa,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC;YACtF,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;YAClD,cAAc,EAAE,QAAQ,CAAC,cAAc;SACxC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;IAES,eAAe,CAAC,KAAU,EAAE,QAAuB;QAC3D,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC9B,MAAM,iDAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA3EY,cAAc;IAH1B,eAAU,CAAC;QACV,IAAI,EAAE,WAAW;KAClB,CAAC;6CAIsB,oBAAe;GAH1B,cAAc,CA2E1B;AA3EY,wCAAc","sourcesContent":["import {nameOf} from \"@tsed/core\";\nimport {Injectable, InjectorService} from \"@tsed/di\";\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {getJsonSchema} from \"@tsed/schema\";\nimport {RequiredValidationError} from \"../errors/RequiredValidationError\";\nimport {IPipe, ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\n\n@Injectable({\n  type: \"validator\"\n})\nexport class ValidationPipe implements IPipe {\n  private validator: {validate(value: any, options: any): Promise<any>};\n\n  constructor(injector: InjectorService) {\n    const provider = injector.getProviders().find((provider) => nameOf(provider.token) === \"AjvService\");\n\n    if (provider) {\n      this.validator = injector.invoke<any>(provider.token);\n    }\n  }\n\n  coerceTypes(value: any, metadata: ParamMetadata) {\n    if (value === undefined) {\n      return value;\n    }\n\n    if (value === \"null\") {\n      return null;\n    }\n\n    if (metadata.isPrimitive) {\n      try {\n        return deserialize(value, {\n          type: metadata.type\n        });\n      } catch (er) {\n        return value;\n      }\n    }\n\n    if (metadata.isArray) {\n      return [].concat(value);\n    }\n\n    return value;\n  }\n\n  skip(value: any, metadata: ParamMetadata) {\n    return metadata.paramType === ParamTypes.PATH && !metadata.isPrimitive;\n  }\n\n  async transform(value: any, metadata: ParamMetadata): Promise<any> {\n    if (!this.validator) {\n      this.checkIsRequired(value, metadata);\n      return value;\n    }\n\n    if (this.skip(value, metadata)) {\n      return value;\n    }\n\n    value = this.coerceTypes(value, metadata);\n\n    this.checkIsRequired(value, metadata);\n\n    if (value === undefined) {\n      return value;\n    }\n\n    await this.validator.validate(value, {\n      schema: getJsonSchema(metadata, {groups: metadata.parameter.groups, customKeys: true}),\n      type: metadata.isClass ? metadata.type : undefined,\n      collectionType: metadata.collectionType\n    });\n\n    return value;\n  }\n\n  protected checkIsRequired(value: any, metadata: ParamMetadata) {\n    if (metadata.isRequired(value)) {\n      throw RequiredValidationError.from(metadata);\n    }\n\n    return true;\n  }\n}\n"]}