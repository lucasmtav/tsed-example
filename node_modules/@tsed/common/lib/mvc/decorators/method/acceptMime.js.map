{"version":3,"file":"acceptMime.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/acceptMime.ts"],"names":[],"mappings":";;;AAAA,qCAAyC;AACzC,yCAAsC;AACtC,6CAAwC;AAExC;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,UAAU,CAAC,GAAG,KAAe;IAC3C,OAAO,oBAAa,CAClB,iBAAQ,CAAC,GAAG,KAAK,CAAC,EAClB,uBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;QACtB,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;IAC/B,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAPD,gCAOC","sourcesContent":["import {useDecorators} from \"@tsed/core\";\nimport {Produces} from \"@tsed/schema\";\nimport {EndpointFn} from \"./endpointFn\";\n\n/**\n * Set a mime list which are acceptable and checks if the specified content types are acceptable, based on the requestâ€™s Accept HTTP header field.\n *\n * ```typescript\n *  @Controller('/mypath')\n *  export class MyCtrl {\n *\n *    @Get('/')\n *    @AcceptMime('application/json')\n *    public getResource(){}\n *  }\n * ```\n *\n * @param mimes\n * @decorator\n * @operation\n * @response\n */\nexport function AcceptMime(...mimes: string[]): Function {\n  return useDecorators(\n    Produces(...mimes),\n    EndpointFn((endpoint) => {\n      endpoint.acceptMimes = mimes;\n    })\n  );\n}\n"]}