{"version":3,"file":"EslintInitHook.js","sourceRoot":"","sources":["../../src/hooks/EslintInitHook.ts"],"names":[],"mappings":";;;;AACA,6CAAmG;AACnG,sDAAkD;AAGlD,IAAa,cAAc,GAA3B,MAAa,cAAc;IAQzB,MAAM,CAAC,GAAmB;QACxB,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,OAAO,EAAE,CAAC;SACX;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAE7B,OAAO;YACL;gBACE,KAAK,EAAE,2BAA2B;gBAClC,IAAI,EAAE,CAAC,GAAQ,EAAE,EAAE;oBACjB,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAChC;wBACE,oBAAoB;wBACpB,GAAG,CAAC,UAAU,IAAI,wBAAwB;wBAC1C,GAAG,CAAC,QAAQ,IAAI,0BAA0B;wBAC1C,GAAG,CAAC,QAAQ,IAAI,sBAAsB;qBACvC,EACD,GAAG,EACH;wBACE,WAAW,EAAE,0BAAY;qBAC1B,CACF,CAAC;gBACJ,CAAC;aACF;SACF,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,GAAmB;QAC5B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YAC1B,WAAW,EAAE,sBAAsB;YACnC,eAAe,EAAE,4BAA4B;SAC9C,CAAC,CAAC;QAEH,IAAI,GAAG,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC1B,QAAQ,EAAE,uCAAuC;aAClD,CAAC,CAAC;SACJ;IACH,CAAC;IAED,eAAe,CAAC,GAAmB;QACjC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,kBAAkB,CAAC,GAAmB;QACpC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjC;YACE,MAAM,EAAE,QAAQ;YAChB,wBAAwB,EAAE,QAAQ;YAClC,wBAAwB,EAAE,QAAQ;YAClC,2BAA2B,EAAE,QAAQ;YACrC,kCAAkC,EAAE,QAAQ;SAC7C,EACD,GAAG,CACJ,CAAC;QAEF,IAAI,GAAG,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjC;gBACE,KAAK,EAAE,QAAQ;gBACf,aAAa,EAAE,QAAQ;aACxB,EACD,GAAG,CACJ,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE;gBAC5B,KAAK,EAAE;oBACL,YAAY,EAAE,aAAa;oBAC3B,aAAa,EAAE,0BAA0B;iBAC1C;aACF,CAAC,CAAC;SACJ;QAED,IAAI,GAAG,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjC;gBACE,QAAQ,EAAE,QAAQ;aACnB,EACD,GAAG,CACJ,CAAC;SACH;IACH,CAAC;CACF,CAAA;AA3FC;IADC,iBAAM,EAAE;sCACc,6BAAkB;mDAAC;AAG1C;IADC,iBAAM,EAAE;sCACe,8BAAmB;oDAAC;AAG5C;IADC,iBAAM,CAAC,MAAM,CAAC;;;;4CA6Bd;AApCU,cAAc;IAD1B,qBAAU,EAAE;GACA,cAAc,CA6F1B;AA7FY,wCAAc","sourcesContent":["import {InitCmdContext} from \"@tsed/cli\";\nimport {Inject, Injectable, OnExec, ProjectPackageJson, RootRendererService} from \"@tsed/cli-core\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\n@Injectable()\nexport class EslintInitHook {\n  @Inject()\n  protected packageJson: ProjectPackageJson;\n\n  @Inject()\n  protected rootRenderer: RootRendererService;\n\n  @OnExec(\"init\")\n  onExec(ctx: InitCmdContext) {\n    if (!ctx.eslint) {\n      return [];\n    }\n\n    this.addScripts(ctx);\n    this.addDependencies(ctx);\n    this.addDevDependencies(ctx);\n\n    return [\n      {\n        title: \"Generate files for eslint\",\n        task: (ctx: any) => {\n          return this.rootRenderer.renderAll(\n            [\n              \"init/.eslintrc.hbs\",\n              ctx.lintstaged && \"init/.lintstagedrc.hbs\",\n              ctx.prettier && \"init/.prettierignore.hbs\",\n              ctx.prettier && \"init/.prettierrc.hbs\"\n            ],\n            ctx,\n            {\n              templateDir: TEMPLATE_DIR\n            }\n          );\n        }\n      }\n    ];\n  }\n\n  addScripts(ctx: InitCmdContext) {\n    this.packageJson.addScripts({\n      \"test:lint\": \"eslint src --ext .ts\",\n      \"test:lint:fix\": \"eslint src --ext .ts --fix\"\n    });\n\n    if (ctx.prettier) {\n      this.packageJson.addScripts({\n        prettier: \"prettier '{src,test}/**/*.ts' --write\"\n      });\n    }\n  }\n\n  addDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDependencies({}, ctx);\n  }\n\n  addDevDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDevDependencies(\n      {\n        eslint: \"latest\",\n        \"eslint-config-prettier\": \"latest\",\n        \"eslint-plugin-prettier\": \"latest\",\n        \"@typescript-eslint/parser\": \"latest\",\n        \"@typescript-eslint/eslint-plugin\": \"latest\"\n      },\n      ctx\n    );\n\n    if (ctx.lintstaged) {\n      this.packageJson.addDevDependencies(\n        {\n          husky: \"latest\",\n          \"lint-staged\": \"latest\"\n        },\n        ctx\n      );\n\n      this.packageJson.add(\"husky\", {\n        hooks: {\n          \"pre-commit\": \"lint-staged\",\n          \"post-commit\": \"git update-index --again\"\n        }\n      });\n    }\n\n    if (ctx.prettier) {\n      this.packageJson.addDevDependencies(\n        {\n          prettier: \"latest\"\n        },\n        ctx\n      );\n    }\n  }\n}\n"]}