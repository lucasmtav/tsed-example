"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EslintInitHook = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const templateDir_1 = require("../utils/templateDir");
let EslintInitHook = class EslintInitHook {
    onExec(ctx) {
        if (!ctx.eslint) {
            return [];
        }
        this.addScripts(ctx);
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        return [
            {
                title: "Generate files for eslint",
                task: (ctx) => {
                    return this.rootRenderer.renderAll([
                        "init/.eslintrc.hbs",
                        ctx.lintstaged && "init/.lintstagedrc.hbs",
                        ctx.prettier && "init/.prettierignore.hbs",
                        ctx.prettier && "init/.prettierrc.hbs"
                    ], ctx, {
                        templateDir: templateDir_1.TEMPLATE_DIR
                    });
                }
            }
        ];
    }
    addScripts(ctx) {
        this.packageJson.addScripts({
            "test:lint": "eslint src --ext .ts",
            "test:lint:fix": "eslint src --ext .ts --fix"
        });
        if (ctx.prettier) {
            this.packageJson.addScripts({
                prettier: "prettier '{src,test}/**/*.ts' --write"
            });
        }
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({
            eslint: "latest",
            "eslint-config-prettier": "latest",
            "eslint-plugin-prettier": "latest",
            "@typescript-eslint/parser": "latest",
            "@typescript-eslint/eslint-plugin": "latest"
        }, ctx);
        if (ctx.lintstaged) {
            this.packageJson.addDevDependencies({
                husky: "latest",
                "lint-staged": "latest"
            }, ctx);
            this.packageJson.add("husky", {
                hooks: {
                    "pre-commit": "lint-staged",
                    "post-commit": "git update-index --again"
                }
            });
        }
        if (ctx.prettier) {
            this.packageJson.addDevDependencies({
                prettier: "latest"
            }, ctx);
        }
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], EslintInitHook.prototype, "packageJson", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.RootRendererService)
], EslintInitHook.prototype, "rootRenderer", void 0);
tslib_1.__decorate([
    cli_core_1.OnExec("init"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], EslintInitHook.prototype, "onExec", null);
EslintInitHook = tslib_1.__decorate([
    cli_core_1.Injectable()
], EslintInitHook);
exports.EslintInitHook = EslintInitHook;
//# sourceMappingURL=EslintInitHook.js.map