{"version":3,"file":"CliMongoose.js","sourceRoot":"","sources":["../../src/services/CliMongoose.ts"],"names":[],"mappings":";;;;AAAA,6CAA0F;AAC1F,6CAA+D;AAC/D,+BAAoC;AACpC,sDAAkD;AAGlD,IAAa,WAAW,GAAxB,MAAa,WAAW;IAOhB,WAAW,CAAC,IAAY,EAAE,UAAe,EAAE;;YAC/C,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAC3B,YAAY,kCAEP,OAAO,KACV,UAAU,EAAE,0BAAY,CAAC,IAAI,CAAC,EAC9B,IAAI,EAAE,uBAAS,CAAC,IAAI,CAAC,KAEvB;gBACE,MAAM,EAAE,GAAG,uBAAS,CAAC,IAAI,CAAC,YAAY;gBACtC,OAAO,EAAE,WAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;gBAC7D,WAAW,EAAE,0BAAY;aAC1B,CACF,CAAC;YAEF,OAAO,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACtC,CAAC;KAAA;IAEK,qBAAqB;;YACzB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC;YAE1E,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBAChC,MAAM,IAAI,GAAG,eAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;gBAE1D,OAAO;oBACL,IAAI;oBACJ,UAAU,EAAE,uBAAS,CAAC,IAAI,CAAC;iBAC5B,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAC5B,WAAW,EACX;gBACE,OAAO;aACR,EACD;gBACE,WAAW,EAAE,0BAAY;gBACzB,MAAM,EAAE,UAAU;gBAClB,OAAO,EAAE,WAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;aAC9D,CACF,CAAC;QACJ,CAAC;KAAA;CACF,CAAA;AA/CC;IADC,iBAAM,EAAE;sCACW,6BAAkB;uDAAC;AAGvC;IADC,iBAAM,EAAE;sCACc,6BAAkB;gDAAC;AAL/B,WAAW;IADvB,qBAAU,EAAE;GACA,WAAW,CAiDvB;AAjDY,kCAAW","sourcesContent":["import {Inject, Injectable, ProjectPackageJson, SrcRendererService} from \"@tsed/cli-core\";\nimport {camelCase, constantCase, paramCase} from \"change-case\";\nimport {basename, join} from \"path\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\n@Injectable()\nexport class CliMongoose {\n  @Inject()\n  projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  protected srcRenderer: SrcRendererService;\n\n  async writeConfig(name: string, options: any = {}) {\n    await this.srcRenderer.render(\n      \"config.hbs\",\n      {\n        ...options,\n        symbolName: constantCase(name),\n        name: paramCase(name)\n      },\n      {\n        output: `${paramCase(name)}.config.ts`,\n        rootDir: join(this.srcRenderer.rootDir, \"config\", \"mongoose\"),\n        templateDir: TEMPLATE_DIR\n      }\n    );\n\n    return this.regenerateIndexConfig();\n  }\n\n  async regenerateIndexConfig() {\n    const list = await this.srcRenderer.scan([\"config/mongoose/*.config.ts\"]);\n\n    const configs = list.map((file) => {\n      const name = basename(file).replace(/\\.config\\.ts/gi, \"\");\n\n      return {\n        name,\n        symbolName: camelCase(name)\n      };\n    });\n\n    return this.srcRenderer.render(\n      \"index.hbs\",\n      {\n        configs\n      },\n      {\n        templateDir: TEMPLATE_DIR,\n        output: \"index.ts\",\n        rootDir: join(this.srcRenderer.rootDir, \"config\", \"mongoose\")\n      }\n    );\n  }\n}\n"]}