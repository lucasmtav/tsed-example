"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliMongoose = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const change_case_1 = require("change-case");
const path_1 = require("path");
const templateDir_1 = require("../utils/templateDir");
let CliMongoose = class CliMongoose {
    writeConfig(name, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.srcRenderer.render("config.hbs", Object.assign(Object.assign({}, options), { symbolName: change_case_1.constantCase(name), name: change_case_1.paramCase(name) }), {
                output: `${change_case_1.paramCase(name)}.config.ts`,
                rootDir: path_1.join(this.srcRenderer.rootDir, "config", "mongoose"),
                templateDir: templateDir_1.TEMPLATE_DIR
            });
            return this.regenerateIndexConfig();
        });
    }
    regenerateIndexConfig() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const list = yield this.srcRenderer.scan(["config/mongoose/*.config.ts"]);
            const configs = list.map((file) => {
                const name = path_1.basename(file).replace(/\.config\.ts/gi, "");
                return {
                    name,
                    symbolName: change_case_1.camelCase(name)
                };
            });
            return this.srcRenderer.render("index.hbs", {
                configs
            }, {
                templateDir: templateDir_1.TEMPLATE_DIR,
                output: "index.ts",
                rootDir: path_1.join(this.srcRenderer.rootDir, "config", "mongoose")
            });
        });
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], CliMongoose.prototype, "projectPackageJson", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], CliMongoose.prototype, "srcRenderer", void 0);
CliMongoose = tslib_1.__decorate([
    cli_core_1.Injectable()
], CliMongoose);
exports.CliMongoose = CliMongoose;
//# sourceMappingURL=CliMongoose.js.map