{"version":3,"file":"MongooseGenerateHook.js","sourceRoot":"","sources":["../../src/hooks/MongooseGenerateHook.ts"],"names":[],"mappings":"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","sourcesContent":["import {GenerateCmdContext, ProvidersInfoService} from \"@tsed/cli\";\nimport {CliDockerComposeYaml, Inject, OnExec, ProjectPackageJson, SrcRendererService, Tasks} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {camelCase, paramCase} from \"change-case\";\nimport {CliMongoose} from \"../services/CliMongoose\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\nconst {plural} = require(\"pluralize\");\n\n@Injectable()\nexport class MongooseGenerateHook {\n  @Inject()\n  projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  srcRenderService: SrcRendererService;\n\n  @Inject()\n  cliMongoose: CliMongoose;\n\n  packages: any[];\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  constructor(private providersInfoService: ProvidersInfoService) {\n    providersInfoService\n      .add(\n        {\n          name: \"Mongoose model\",\n          value: \"mongoose:model\",\n          model: \"{{symbolName}}.model\",\n          baseDir: \"models\"\n        },\n        MongooseGenerateHook\n      )\n      .add(\n        {\n          name: \"Mongoose schema\",\n          value: \"mongoose:schema\",\n          model: \"{{symbolName}}.schema\",\n          baseDir: \"models\"\n        },\n        MongooseGenerateHook\n      )\n      .add(\n        {\n          name: \"Mongoose connection\",\n          value: \"mongoose:connection\"\n        },\n        MongooseGenerateHook\n      );\n  }\n\n  @OnExec(\"generate\")\n  onGenerateExec(ctx: GenerateCmdContext): Tasks {\n    if (this.providersInfoService.isMyProvider(ctx.type, MongooseGenerateHook)) {\n      switch (ctx.type) {\n        case \"mongoose:connection\":\n          return this.generateConnection(ctx);\n        case \"mongoose:model\":\n        case \"mongoose:schema\":\n          return this.generateTemplate(ctx);\n      }\n    }\n\n    return [];\n  }\n\n  private generateTemplate(ctx: GenerateCmdContext) {\n    const {symbolPath, type, symbolName} = ctx;\n    const template = `mongoose.${type.split(\":\")[1]}.hbs`;\n    const newCtx = {\n      ...ctx,\n      collectionName: plural(camelCase(symbolName.replace(/Schema|Model/gi, \"\")))\n    };\n\n    return [\n      {\n        title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,\n        task: () =>\n          this.srcRenderService.render(template, newCtx, {\n            output: `${symbolPath}.ts`,\n            templateDir: TEMPLATE_DIR\n          })\n      }\n    ];\n  }\n\n  private generateConnection(ctx: GenerateCmdContext) {\n    return [\n      {\n        title: `Generate Mongoose configuration file to '${paramCase(ctx.name)}.config.ts'`,\n        task: () => this.cliMongoose.writeConfig(ctx.name, ctx)\n      },\n      {\n        title: \"Generate docker-compose configuration\",\n        task: async () => this.cliDockerComposeYaml.addDatabaseService(ctx.name, \"mongodb\")\n      }\n    ];\n  }\n}\n"]}