{"version":3,"file":"MongooseInitHook.js","sourceRoot":"","sources":["../../src/hooks/MongooseInitHook.ts"],"names":[],"mappings":";;;;AACA,6CAAiI;AACjI,iCAAoC;AACpC,yDAAoD;AAGpD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAiB3B,MAAM,CAAC,GAAmB;QACxB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAE7B,OAAO;YACL;gBACE,KAAK,EAAE,iCAAiC;gBACxC,IAAI,EAAE,GAAS,EAAE;oBACf,OAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE;wBACtC,UAAU,EAAE,kBAAkB;qBAC/B,CAAC,CAAA;kBAAA;aACL;YACD;gBACE,KAAK,EAAE,uCAAuC;gBAC9C,IAAI,EAAE,GAAS,EAAE,wDAAC,OAAA,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA,GAAA;aACrF;SACF,CAAC;IACJ,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,eAAe,CAAC,GAAmB;QACjC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,kBAAkB,CAAC,GAAmB;QACpC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;CACF,CAAA;AA9CC;IADC,iBAAM,EAAE;sCACI,yBAAW;qDAAC;AAGzB;IADC,iBAAM,EAAE;sCACc,6BAAkB;qDAAC;AAG1C;IADC,iBAAM,EAAE;sCACe,8BAAmB;sDAAC;AAG5C;IADC,iBAAM,EAAE;sCACc,6BAAkB;qDAAC;AAG1C;IADC,iBAAM,EAAE;sCACuB,+BAAoB;8DAAC;AAGrD;IADC,iBAAM,CAAC,MAAM,CAAC;;;;8CAmBd;AAnCU,gBAAgB;IAD5B,eAAU,EAAE;GACA,gBAAgB,CAgD5B;AAhDY,4CAAgB","sourcesContent":["import {InitCmdContext} from \"@tsed/cli\";\nimport {CliDockerComposeYaml, Inject, OnExec, ProjectPackageJson, RootRendererService, SrcRendererService} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {CliMongoose} from \"../services/CliMongoose\";\n\n@Injectable()\nexport class MongooseInitHook {\n  @Inject()\n  cliMongoose: CliMongoose;\n\n  @Inject()\n  protected packageJson: ProjectPackageJson;\n\n  @Inject()\n  protected rootRenderer: RootRendererService;\n\n  @Inject()\n  protected srcRenderer: SrcRendererService;\n\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  @OnExec(\"init\")\n  onExec(ctx: InitCmdContext) {\n    this.addScripts();\n    this.addDependencies(ctx);\n    this.addDevDependencies(ctx);\n\n    return [\n      {\n        title: \"Generate Mongoose configuration\",\n        task: async () =>\n          this.cliMongoose.writeConfig(\"default\", {\n            symbolName: \"MONGOOSE_DEFAULT\"\n          })\n      },\n      {\n        title: \"Generate docker-compose configuration\",\n        task: async () => this.cliDockerComposeYaml.addDatabaseService(\"mongodb\", \"mongodb\")\n      }\n    ];\n  }\n\n  addScripts() {\n    this.packageJson.addScripts({});\n  }\n\n  addDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDependencies({}, ctx);\n  }\n\n  addDevDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDevDependencies({}, ctx);\n  }\n}\n"]}