"use strict";
var MongooseGenerateHook_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseGenerateHook = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@tsed/cli");
const cli_core_1 = require("@tsed/cli-core");
const di_1 = require("@tsed/di");
const change_case_1 = require("change-case");
const CliMongoose_1 = require("../services/CliMongoose");
const templateDir_1 = require("../utils/templateDir");
const { plural } = require("pluralize");
let MongooseGenerateHook = MongooseGenerateHook_1 = class MongooseGenerateHook {
    constructor(providersInfoService) {
        this.providersInfoService = providersInfoService;
        providersInfoService
            .add({
            name: "Mongoose model",
            value: "mongoose:model",
            model: "{{symbolName}}.model",
            baseDir: "models"
        }, MongooseGenerateHook_1)
            .add({
            name: "Mongoose schema",
            value: "mongoose:schema",
            model: "{{symbolName}}.schema",
            baseDir: "models"
        }, MongooseGenerateHook_1)
            .add({
            name: "Mongoose connection",
            value: "mongoose:connection"
        }, MongooseGenerateHook_1);
    }
    onGenerateExec(ctx) {
        if (this.providersInfoService.isMyProvider(ctx.type, MongooseGenerateHook_1)) {
            switch (ctx.type) {
                case "mongoose:connection":
                    return this.generateConnection(ctx);
                case "mongoose:model":
                case "mongoose:schema":
                    return this.generateTemplate(ctx);
            }
        }
        return [];
    }
    generateTemplate(ctx) {
        const { symbolPath, type, symbolName } = ctx;
        const template = `mongoose.${type.split(":")[1]}.hbs`;
        const newCtx = Object.assign(Object.assign({}, ctx), { collectionName: plural(change_case_1.camelCase(symbolName.replace(/Schema|Model/gi, ""))) });
        return [
            {
                title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,
                task: () => this.srcRenderService.render(template, newCtx, {
                    output: `${symbolPath}.ts`,
                    templateDir: templateDir_1.TEMPLATE_DIR
                })
            }
        ];
    }
    generateConnection(ctx) {
        return [
            {
                title: `Generate Mongoose configuration file to '${change_case_1.paramCase(ctx.name)}.config.ts'`,
                task: () => this.cliMongoose.writeConfig(ctx.name, ctx)
            },
            {
                title: "Generate docker-compose configuration",
                task: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.cliDockerComposeYaml.addDatabaseService(ctx.name, "mongodb"); })
            }
        ];
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], MongooseGenerateHook.prototype, "projectPackageJson", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], MongooseGenerateHook.prototype, "srcRenderService", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", CliMongoose_1.CliMongoose)
], MongooseGenerateHook.prototype, "cliMongoose", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.CliDockerComposeYaml)
], MongooseGenerateHook.prototype, "cliDockerComposeYaml", void 0);
tslib_1.__decorate([
    cli_core_1.OnExec("generate"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Array)
], MongooseGenerateHook.prototype, "onGenerateExec", null);
MongooseGenerateHook = MongooseGenerateHook_1 = tslib_1.__decorate([
    di_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [cli_1.ProvidersInfoService])
], MongooseGenerateHook);
exports.MongooseGenerateHook = MongooseGenerateHook;
//# sourceMappingURL=MongooseGenerateHook.js.map