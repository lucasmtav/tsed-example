{"version":3,"file":"PlatformExpress.js","sourceRoot":"","sources":["../../src/components/PlatformExpress.ts"],"names":[],"mappings":";;;AAAA,yCAYsB;AACtB,qCAAqC;AAErC,wEAAmE;AACnE,0CAMqB;AAErB;;;GAGG;AACH,MAAa,eAAgB,SAAQ,wBAAoD;IAwBvF,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAiB,EAAE,WAAwC,EAAE;QAClF,OAAO,IAAI,CAAC,KAAK,CAAkB,eAAe,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAClF,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,qCAAiB,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC;IACd,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEtC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YAC5D,MAAM,sBAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAE7C,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,MAAgB;QACzC,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,UAAG,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE5F,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,MAAM,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAE/B,YAAY;QACZ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;;YAClC,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAqB,2BAAkB,CAAC,0CAAE,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE;QACxF,CAAC,CAAC,CAAC;QAEH,oBAAoB;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;;YACvD,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAqB,2BAAkB,CAAC,0CAAE,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE;QAClF,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oBAAoB;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAgB,sBAAa,CAAE,CAAC;QAEvE,aAAa,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,EAAC,EAAE,EAAE;YACzD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,aAAa,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;QAC3F,aAAa,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3E,CAAC;;AA5EH,0CA6EC;AA5EQ,yBAAS,GAAG;IACjB;QACE,OAAO,EAAE,4BAAmB;QAC5B,QAAQ,EAAE,qCAA0B;KACrC;IACD;QACE,OAAO,EAAE,uBAAc;QACvB,QAAQ,EAAE,gCAAqB;KAChC;IACD;QACE,OAAO,EAAE,wBAAe;QACxB,QAAQ,EAAE,iCAAsB;KACjC;IACD;QACE,OAAO,EAAE,yBAAgB;QACzB,QAAQ,EAAE,kCAAuB;KAClC;IACD;QACE,OAAO,EAAE,wBAAe;QACxB,QAAQ,EAAE,iCAAsB;KACjC;CACF,CAAC","sourcesContent":["import {\n  createContext,\n  IRoute,\n  PlatformApplication,\n  PlatformBuilder,\n  PlatformExceptions,\n  PlatformHandler,\n  PlatformRequest,\n  PlatformResponse,\n  PlatformRouter,\n  PlatformViews,\n  useCtxHandler\n} from \"@tsed/common\";\nimport {Env, Type} from \"@tsed/core\";\nimport Express from \"express\";\nimport {rawBodyMiddleware} from \"../middlewares/rawBodyMiddleware\";\nimport {\n  PlatformExpressApplication,\n  PlatformExpressHandler,\n  PlatformExpressRequest,\n  PlatformExpressResponse,\n  PlatformExpressRouter\n} from \"../services\";\n\n/**\n * @platform\n * @express\n */\nexport class PlatformExpress extends PlatformBuilder<Express.Application, Express.Router> {\n  static providers = [\n    {\n      provide: PlatformApplication,\n      useClass: PlatformExpressApplication\n    },\n    {\n      provide: PlatformRouter,\n      useClass: PlatformExpressRouter\n    },\n    {\n      provide: PlatformHandler,\n      useClass: PlatformExpressHandler\n    },\n    {\n      provide: PlatformResponse,\n      useClass: PlatformExpressResponse\n    },\n    {\n      provide: PlatformRequest,\n      useClass: PlatformExpressRequest\n    }\n  ];\n\n  static async bootstrap(module: Type<any>, settings: Partial<TsED.Configuration> = {}): Promise<PlatformExpress> {\n    return this.build<PlatformExpress>(PlatformExpress).bootstrap(module, settings);\n  }\n\n  protected useRouter(): this {\n    this.logger.info(\"Mount app router\");\n    this.app.getApp().use(rawBodyMiddleware);\n    this.app.getApp().use(this.app.getRouter());\n\n    return this;\n  }\n\n  protected useContext(): this {\n    this.logger.info(\"Mount app context\");\n\n    this.app.getApp().use(async (req: any, res: any, next: any) => {\n      await createContext(this.injector, req, res);\n\n      return next();\n    });\n\n    return this;\n  }\n\n  protected async loadRoutes(routes: IRoute[]): Promise<void> {\n    // disable x-powered-by header\n    this.injector.settings.get(\"env\") === Env.PROD && this.app.getApp().disable(\"x-powered-by\");\n\n    this.configureViewsEngine();\n\n    await super.loadRoutes(routes);\n\n    // NOT FOUND\n    this.app.use((req: any, res: any) => {\n      this.injector.get<PlatformExceptions>(PlatformExceptions)?.resourceNotFound(req.$ctx);\n    });\n\n    // EXCEPTION FILTERS\n    this.app.use((err: any, req: any, res: any, next: any) => {\n      this.injector.get<PlatformExceptions>(PlatformExceptions)?.catch(err, req.$ctx);\n    });\n  }\n\n  private configureViewsEngine() {\n    const platformViews = this.injector.get<PlatformViews>(PlatformViews)!;\n\n    platformViews.getEngines().forEach(({extension, engine}) => {\n      this.app.getApp().engine(extension, engine);\n    });\n\n    platformViews.viewEngine && this.app.getApp().set(\"view engine\", platformViews.viewEngine);\n    platformViews.root && this.app.getApp().set(\"views\", platformViews.root);\n  }\n}\n"]}