"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ref = void 0;
const core_1 = require("@tsed/core");
const json_mapper_1 = require("@tsed/json-mapper");
const schema_1 = require("@tsed/schema");
const mongoose_1 = require("mongoose");
const constants_1 = require("../constants");
const MongooseSchemaTypes_1 = require("../interfaces/MongooseSchemaTypes");
const MongooseModels_1 = require("../registries/MongooseModels");
function isRef(value) {
    return (value && value._bsontype) || core_1.isString(value);
}
/**
 * Define a property as mongoose reference to other Model (decorated with @Model).
 *
 * ### Example
 *
 * ```typescript
 *
 * @Model()
 * class FooModel {
 *
 *    @Ref(Foo2Model)
 *    field: Ref<Foo2Model>
 *
 *    @Ref(Foo2Model)
 *    list: Ref<Foo2Model>[]
 * }
 *
 * @Model()
 * class Foo2Model {
 * }
 * ```
 *
 * @param model
 * @param type
 * @returns {Function}
 * @decorator
 * @mongoose
 * @property
 */
function Ref(model, type = MongooseSchemaTypes_1.MongooseSchemaTypes.OBJECT_ID) {
    const getType = () => (core_1.isString(model) ? MongooseModels_1.MongooseModels.get(model) : core_1.isArrowFn(model) ? model() : model);
    return core_1.useDecorators(schema_1.Property(Object), core_1.StoreMerge(constants_1.MONGOOSE_SCHEMA, {
        type: mongoose_1.Schema.Types[type],
        ref: model
    }), json_mapper_1.OnDeserialize((value) => {
        if (isRef(value)) {
            return value.toString();
        }
        return value;
    }), json_mapper_1.OnSerialize((value, ctx) => {
        if (isRef(value)) {
            return value.toString();
        }
        const type = getType();
        return json_mapper_1.serialize(value, { ...ctx, type });
    }), schema_1.JsonEntityFn((store) => {
        const type = getType();
        store.itemSchema.oneOf([
            schema_1.string().example("5ce7ad3028890bd71749d477").description("Mongoose Ref ObjectId"),
            schema_1.JsonEntityStore.from(type).schema
        ]);
        store.type = Object;
    }));
}
exports.Ref = Ref;
//# sourceMappingURL=ref.js.map