{"version":3,"file":"ref.js","sourceRoot":"","sources":["../../src/decorators/ref.ts"],"names":[],"mappings":";;;AAAA,qCAAgF;AAChF,mDAAwE;AACxE,yCAA6E;AAC7E,uCAAkD;AAClD,4CAA6C;AAC7C,2EAAsE;AACtE,iEAA4D;AAE5D,SAAS,KAAK,CAAC,KAA+B;IAC5C,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,eAAQ,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,SAAgB,GAAG,CAAC,KAAkC,EAAE,OAA4B,yCAAmB,CAAC,SAAS;IAC/G,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,+BAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAEzG,OAAO,oBAAa,CAClB,iBAAQ,CAAC,MAAM,CAAC,EAChB,iBAAU,CAAC,2BAAe,EAAE;QAC1B,IAAI,EAAE,iBAAc,CAAC,KAAK,CAAC,IAAI,CAAC;QAChC,GAAG,EAAE,KAAK;KACX,CAAC,EACF,2BAAa,CAAC,CAAC,KAAK,EAAE,EAAE;QACtB,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;SACzB;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,EACF,yBAAW,CAAC,CAAC,KAAU,EAAE,GAAG,EAAE,EAAE;QAC9B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;SACzB;QACD,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC;QAEvB,OAAO,uBAAS,CAAC,KAAK,EAAE,EAAC,GAAG,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,EACF,qBAAY,CAAC,CAAC,KAAK,EAAE,EAAE;QACrB,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC;QAEvB,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;YACrB,eAAM,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,WAAW,CAAC,uBAAuB,CAAC;YACjF,wBAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAa;SACzC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;IACtB,CAAC,CAAC,CACkB,CAAC;AACzB,CAAC;AAnCD,kBAmCC","sourcesContent":["import {isArrowFn, isString, StoreMerge, Type, useDecorators} from \"@tsed/core\";\nimport {OnDeserialize, OnSerialize, serialize} from \"@tsed/json-mapper\";\nimport {JsonEntityFn, JsonEntityStore, Property, string} from \"@tsed/schema\";\nimport {Schema as MongooseSchema} from \"mongoose\";\nimport {MONGOOSE_SCHEMA} from \"../constants\";\nimport {MongooseSchemaTypes} from \"../interfaces/MongooseSchemaTypes\";\nimport {MongooseModels} from \"../registries/MongooseModels\";\n\nfunction isRef(value: undefined | string | any) {\n  return (value && value._bsontype) || isString(value);\n}\n\n/**\n * Define a property as mongoose reference to other Model (decorated with @Model).\n *\n * ### Example\n *\n * ```typescript\n *\n * @Model()\n * class FooModel {\n *\n *    @Ref(Foo2Model)\n *    field: Ref<Foo2Model>\n *\n *    @Ref(Foo2Model)\n *    list: Ref<Foo2Model>[]\n * }\n *\n * @Model()\n * class Foo2Model {\n * }\n * ```\n *\n * @param model\n * @param type\n * @returns {Function}\n * @decorator\n * @mongoose\n * @property\n */\nexport function Ref(model: string | (() => Type) | any, type: MongooseSchemaTypes = MongooseSchemaTypes.OBJECT_ID): PropertyDecorator {\n  const getType = () => (isString(model) ? MongooseModels.get(model) : isArrowFn(model) ? model() : model);\n\n  return useDecorators(\n    Property(Object),\n    StoreMerge(MONGOOSE_SCHEMA, {\n      type: MongooseSchema.Types[type],\n      ref: model\n    }),\n    OnDeserialize((value) => {\n      if (isRef(value)) {\n        return value.toString();\n      }\n\n      return value;\n    }),\n    OnSerialize((value: any, ctx) => {\n      if (isRef(value)) {\n        return value.toString();\n      }\n      const type = getType();\n\n      return serialize(value, {...ctx, type});\n    }),\n    JsonEntityFn((store) => {\n      const type = getType();\n\n      store.itemSchema.oneOf([\n        string().example(\"5ce7ad3028890bd71749d477\").description(\"Mongoose Ref ObjectId\"),\n        JsonEntityStore.from(type).schema as any\n      ]);\n\n      store.type = Object;\n    })\n  ) as PropertyDecorator;\n}\n\nexport type Ref<T> = T | string;\n"]}