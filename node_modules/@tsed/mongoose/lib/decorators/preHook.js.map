{"version":3,"file":"preHook.js","sourceRoot":"","sources":["../../src/decorators/preHook.ts"],"names":[],"mappings":";;;AAAA,qCAA2D;AAE3D,0DAAqD;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,SAAgB,OAAO,CAAU,MAAc,EAAE,EAA+C,EAAE,OAA6B;IAC7H,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,IAAI,sBAAe,CAAC,IAAI,CAAC,KAAK,qBAAc,CAAC,UAAU,EAAE;YACvD,OAAO,GAAG,EAAyB,CAAC;YACpC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QAED,6BAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACrB,GAAG,EAAE;gBACH;oBACE,MAAM;oBACN,EAAE,EAAE,EAA0B;oBAC9B,OAAO;iBACR;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAjBD,0BAiBC","sourcesContent":["import {decoratorTypeOf, DecoratorTypes} from \"@tsed/core\";\nimport {MongooseHookOptions, MongoosePreHookCB} from \"../interfaces\";\nimport {schemaOptions} from \"../utils/schemaOptions\";\n\n/**\n *\n * We can simply attach a `@PreHook` decorator to your model class and\n * define the hook function like you normally would in Mongoose.\n *\n * ```typescript\n * import {Ignore, Required} from \"@tsed/common\";\n * import {PreHook, Model} from \"@tsed/mongoose\";\n *\n * @Model()\n * @PreHook(\"save\", (car: CarModel, next) => {\n *    if (car.model === 'Tesla') {\n *        car.isFast = true;\n *      }\n *      next();\n *})\n * export class CarModel {\n *\n *    @Ignore()\n *    _id: string;\n *\n *    @Required()\n *    model: string;\n *\n *    @Required()\n *    isFast: boolean;\n *\n *    // or Prehook on static method\n *    @PreHook(\"save\")\n *    static preSave(car: CarModel, next) {\n *       if (car.model === 'Tesla') {\n *           car.isFast = true;\n *       }\n *       next();\n *    }\n * }\n * ```\n *\n * This will execute the pre-save hook each time a `CarModel` document is saved.\n *\n * @param {string} method\n * @param fn\n * @param options\n * @returns {Function}\n * @decorator\n * @class\n */\nexport function PreHook<T = any>(method: string, fn?: MongoosePreHookCB<T> | MongooseHookOptions, options?: MongooseHookOptions): Function {\n  return (...args: any[]) => {\n    if (decoratorTypeOf(args) === DecoratorTypes.METHOD_STC) {\n      options = fn as MongooseHookOptions;\n      fn = args[0][args[1]].bind(args[0]);\n    }\n\n    schemaOptions(args[0], {\n      pre: [\n        {\n          method,\n          fn: fn as MongoosePreHookCB<T>,\n          options\n        }\n      ]\n    });\n  };\n}\n"]}