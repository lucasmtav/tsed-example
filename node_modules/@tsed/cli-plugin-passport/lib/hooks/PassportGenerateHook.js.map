{"version":3,"file":"PassportGenerateHook.js","sourceRoot":"","sources":["../../src/hooks/PassportGenerateHook.ts"],"names":[],"mappings":"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","sourcesContent":["import {GenerateCmdContext, ProvidersInfoService} from \"@tsed/cli\";\nimport {Inject, OnExec, OnPrompt, ProjectPackageJson, SrcRendererService, Tasks} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {paramCase} from \"change-case\";\nimport {PassportClient} from \"../services/PassportClient\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\nexport interface PassportGenerateOptions extends GenerateCmdContext {\n  passportPackage: string;\n}\n\n@Injectable()\nexport class PassportGenerateHook {\n  @Inject()\n  projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  srcRenderService: SrcRendererService;\n\n  @Inject()\n  passportClient: PassportClient;\n\n  packages: any[];\n\n  constructor(private providersInfoService: ProvidersInfoService) {\n    providersInfoService.add(\n      {\n        name: \"Protocol\",\n        value: \"protocol\",\n        model: \"{{symbolName}}.protocol\"\n      },\n      PassportGenerateHook\n    );\n  }\n\n  @OnPrompt(\"generate\")\n  async onGeneratePrompt() {\n    this.packages = await this.passportClient.getPackages();\n\n    const list = this.packages.map((item) => {\n      return {\n        name: `${item.name} - ${item.description}`,\n        value: item.name\n      };\n    });\n\n    return [\n      {\n        type: \"autocomplete\",\n        name: \"passportPackage\",\n        message: \"Which passport package ?\",\n        when(state: any) {\n          return [\"protocol\"].includes(state.type);\n        },\n        source: async (state: any, keyword: string) => {\n          if (keyword) {\n            return list.filter((item) => item.name.toLowerCase().includes(keyword.toLowerCase()));\n          }\n\n          return list;\n        }\n      }\n    ];\n  }\n\n  @OnExec(\"generate\")\n  onGenerateExec(ctx: PassportGenerateOptions): Tasks {\n    if (this.providersInfoService.isMyProvider(ctx.type, PassportGenerateHook)) {\n      ctx = this.mapOptions(ctx);\n      const {passportPackage, symbolPath} = ctx;\n\n      this.projectPackageJson.addDependency(ctx.passportPackage, this.getPassportPackageVersion(passportPackage));\n\n      return [\n        {\n          title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,\n          task: () =>\n            this.srcRenderService.render(this.getTemplate(passportPackage), ctx, {\n              output: `${symbolPath}.ts`,\n              templateDir: TEMPLATE_DIR\n            })\n        }\n      ];\n    }\n\n    return [];\n  }\n\n  private mapOptions(options: PassportGenerateOptions) {\n    return {\n      ...options,\n      protocolName: paramCase(options.name),\n      passportPackage: options.passportPackage\n    };\n  }\n\n  private getTemplate(passportPackage: string) {\n    const template = `${passportPackage}.protocol.hbs`;\n\n    return this.srcRenderService.templateExists(template, {templateDir: TEMPLATE_DIR}) ? template : \"generic.protocol.hbs\";\n  }\n\n  private getPassportPackageVersion(passportPackage: string) {\n    const passportPkgDetails = this.packages.find((pkg) => pkg.name === passportPackage);\n\n    return passportPkgDetails ? passportPkgDetails[\"dist-tags\"]?.latest : undefined;\n  }\n}\n"]}