"use strict";
var PassportGenerateHook_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportGenerateHook = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@tsed/cli");
const cli_core_1 = require("@tsed/cli-core");
const di_1 = require("@tsed/di");
const change_case_1 = require("change-case");
const PassportClient_1 = require("../services/PassportClient");
const templateDir_1 = require("../utils/templateDir");
let PassportGenerateHook = PassportGenerateHook_1 = class PassportGenerateHook {
    constructor(providersInfoService) {
        this.providersInfoService = providersInfoService;
        providersInfoService.add({
            name: "Protocol",
            value: "protocol",
            model: "{{symbolName}}.protocol"
        }, PassportGenerateHook_1);
    }
    onGeneratePrompt() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.packages = yield this.passportClient.getPackages();
            const list = this.packages.map((item) => {
                return {
                    name: `${item.name} - ${item.description}`,
                    value: item.name
                };
            });
            return [
                {
                    type: "autocomplete",
                    name: "passportPackage",
                    message: "Which passport package ?",
                    when(state) {
                        return ["protocol"].includes(state.type);
                    },
                    source: (state, keyword) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        if (keyword) {
                            return list.filter((item) => item.name.toLowerCase().includes(keyword.toLowerCase()));
                        }
                        return list;
                    })
                }
            ];
        });
    }
    onGenerateExec(ctx) {
        if (this.providersInfoService.isMyProvider(ctx.type, PassportGenerateHook_1)) {
            ctx = this.mapOptions(ctx);
            const { passportPackage, symbolPath } = ctx;
            this.projectPackageJson.addDependency(ctx.passportPackage, this.getPassportPackageVersion(passportPackage));
            return [
                {
                    title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,
                    task: () => this.srcRenderService.render(this.getTemplate(passportPackage), ctx, {
                        output: `${symbolPath}.ts`,
                        templateDir: templateDir_1.TEMPLATE_DIR
                    })
                }
            ];
        }
        return [];
    }
    mapOptions(options) {
        return Object.assign(Object.assign({}, options), { protocolName: change_case_1.paramCase(options.name), passportPackage: options.passportPackage });
    }
    getTemplate(passportPackage) {
        const template = `${passportPackage}.protocol.hbs`;
        return this.srcRenderService.templateExists(template, { templateDir: templateDir_1.TEMPLATE_DIR }) ? template : "generic.protocol.hbs";
    }
    getPassportPackageVersion(passportPackage) {
        var _a;
        const passportPkgDetails = this.packages.find((pkg) => pkg.name === passportPackage);
        return passportPkgDetails ? (_a = passportPkgDetails["dist-tags"]) === null || _a === void 0 ? void 0 : _a.latest : undefined;
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], PassportGenerateHook.prototype, "projectPackageJson", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], PassportGenerateHook.prototype, "srcRenderService", void 0);
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", PassportClient_1.PassportClient)
], PassportGenerateHook.prototype, "passportClient", void 0);
tslib_1.__decorate([
    cli_core_1.OnPrompt("generate"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], PassportGenerateHook.prototype, "onGeneratePrompt", null);
tslib_1.__decorate([
    cli_core_1.OnExec("generate"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Array)
], PassportGenerateHook.prototype, "onGenerateExec", null);
PassportGenerateHook = PassportGenerateHook_1 = tslib_1.__decorate([
    di_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [cli_1.ProvidersInfoService])
], PassportGenerateHook);
exports.PassportGenerateHook = PassportGenerateHook;
//# sourceMappingURL=PassportGenerateHook.js.map