{"version":3,"file":"DecoratorContext.js","sourceRoot":"","sources":["../../src/domain/DecoratorContext.ts"],"names":[],"mappings":";;;AAAA,qCAA+D;AAC/D,6CAAuC;AAOvC;;GAEG;AACH,MAAsB,gBAA0B,SAAQ,GAAgB;IAAxE;;QAIY,YAAO,GAA6B,EAAE,CAAC;IAoEnD,CAAC;IAlEC,SAAS,CAAC,EAA0B;QAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,MAAM,SAAS,GAAQ,CAAC,GAAG,IAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAEtF,MAAM,IAAI,GAAG,CAAC,EAAO,EAAE,EAAE;YACvB,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;gBACxB,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;gBACZ,OAAO,SAAS,CAAC;YACnB,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,OAAO,GAAG,CAAC,GAAW,EAAE,EAAE;YAC9B,OAAO,IAAI,CAAC,CAAC,GAAG,MAAa,EAAE,EAAE;gBAC/B,GAAG,IAAI,IAAI,CAAC,CAAC,CAAE,IAAY,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5B,SAAS,CAAC,wBAAU,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,OAAQ,SAA0B,CAAC;IACrC,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACtD,OAAO;gBACL,GAAG,GAAG;gBACN,CAAC,GAAG,CAAC,EAAE,KAAK;aACb,CAAC;QACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED,YAAY,CAAC,GAAW,EAAE,YAAiB;QACzC,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC;QAE1C,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;SACR;QAED,IAAI,IAAI,CAAC,aAAa,KAAK,qBAAc,CAAC,KAAK,EAAE;YAC/C,KAAK,GAAG;gBACN,GAAG,KAAK;gBACR,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;aACxB,CAAC;SACH;QAED,OAAO;YACL,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;YACvB,GAAG,KAAK;SACT,CAAC;IACJ,CAAC;IAIS,UAAU;QAClB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAxED,4CAwEC","sourcesContent":["import {DecoratorParameters, DecoratorTypes} from \"@tsed/core\";\nimport {pascalCase} from \"change-case\";\nimport {JsonEntityStore} from \"./JsonEntityStore\";\n\nexport interface DecoratorActionHandler {\n  (ctx: Map<string, any>): void;\n}\n\n/**\n * @ignore\n */\nexport abstract class DecoratorContext<T = any> extends Map<string, any> {\n  readonly methods: string[];\n  protected decoratorType: DecoratorTypes;\n  protected store: JsonEntityStore;\n  protected actions: DecoratorActionHandler[] = [];\n\n  addAction(cb: DecoratorActionHandler) {\n    this.actions.push(cb);\n    return this;\n  }\n\n  build(): T {\n    const decorator: any = (...args: DecoratorParameters) => this.onInit(args, decorator);\n\n    const wrap = (cb: any) => {\n      return (...args: any[]) => {\n        cb(...args);\n        return decorator;\n      };\n    };\n\n    const wrapKey = (key: string) => {\n      return wrap((...values: any[]) => {\n        key in this ? (this as any)[key](...values) : this.set(key, values[0]);\n      });\n    };\n\n    this.methods.forEach((name) => {\n      decorator[pascalCase(name)] = wrapKey(name);\n    });\n\n    return (decorator as unknown) as T;\n  }\n\n  toObject(): any {\n    return [...this.entries()].reduce((obj, [key, value]) => {\n      return {\n        ...obj,\n        [key]: value\n      };\n    }, {});\n  }\n\n  getMergedKey(key: string, defaultValue: any) {\n    let value = this.get(key) || defaultValue;\n\n    if (!value) {\n      return;\n    }\n\n    if (this.decoratorType === DecoratorTypes.CLASS) {\n      value = {\n        ...value,\n        ...(defaultValue || {})\n      };\n    }\n\n    return {\n      ...(defaultValue || {}),\n      ...value\n    };\n  }\n\n  protected abstract onInit(args: DecoratorParameters, decorator: any): void;\n\n  protected runActions() {\n    this.actions.forEach((action: any) => {\n      action(this);\n    });\n\n    return this;\n  }\n}\n"]}