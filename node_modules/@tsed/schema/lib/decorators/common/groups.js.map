{"version":3,"file":"groups.js","sourceRoot":"","sources":["../../../src/decorators/common/groups.ts"],"names":[],"mappings":";;;;AAAA,qCAA0C;AAC1C,oEAAoC;AACpC,iDAA4C;AAE5C,SAAS,WAAW,CAAC,MAAgB,EAAE,cAAwB,EAAE;IAC/D,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9G,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IAExE,IAAI,cAAc,CAAC,MAAM,EAAE;QACzB,IAAI,WAAW,CAAC,MAAM,IAAI,oBAAU,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,MAAM,EAAE;YACxE,OAAO,IAAI,CAAC;SACb;KACF;IAED,IAAI,cAAc,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,oBAAU,CAChB,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAChD,WAAW,CACZ,CAAC,MAAM,CAAC;KACV;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,MAAM,CAAC,GAAG,MAAgB;IACxC,OAAO,2BAAY,CAAC,CAAC,MAAM,EAAE,EAAE;QAC7B,IAAI,MAAM,CAAC,aAAa,KAAK,qBAAc,CAAC,IAAI,EAAE;YAChD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAa,EAAE,WAAqB,EAAE,EAAE;gBACzE,IAAI,CAAC,IAAI,EAAE;oBACT,IAAI,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE;wBACpC,OAAO,IAAI,CAAC;qBACb;iBACF;gBAED,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,MAAM,CAAC,aAAa,KAAK,qBAAc,CAAC,KAAK,EAAE;YACjD,MAAM,CAAC,SAAU,CAAC,MAAM,GAAG,MAAM,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAlBD,wBAkBC","sourcesContent":["import {DecoratorTypes} from \"@tsed/core\";\nimport micromatch from \"micromatch\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\nfunction matchGroups(groups: string[], compareWith: string[] = []) {\n  const groupsExcludes = groups.filter((group) => group.startsWith(\"!\")).map((group) => group.replace(\"!\", \"\"));\n  const groupsIncludes = groups.filter((group) => !group.startsWith(\"!\"));\n\n  if (groupsExcludes.length) {\n    if (compareWith.length && micromatch(groupsExcludes, compareWith).length) {\n      return true;\n    }\n  }\n\n  if (groupsIncludes.length) {\n    return !micromatch(\n      groups.filter((group) => !group.startsWith(\"!\")),\n      compareWith\n    ).length;\n  }\n\n  return false;\n}\n\nexport function Groups(...groups: string[]): Function {\n  return JsonEntityFn((entity) => {\n    if (entity.decoratorType === DecoratorTypes.PROP) {\n      entity.schema.$hooks.on(\"groups\", (prev: boolean, givenGroups: string[]) => {\n        if (!prev) {\n          if (matchGroups(groups, givenGroups)) {\n            return true;\n          }\n        }\n\n        return prev;\n      });\n    }\n\n    if (entity.decoratorType === DecoratorTypes.PARAM) {\n      entity.parameter!.groups = groups;\n    }\n  });\n}\n"]}