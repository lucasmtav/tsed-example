"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AjvService = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const schema_1 = require("@tsed/schema");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const AjvValidationError_1 = require("../errors/AjvValidationError");
require("./Ajv");
function defaultFormatter(error) {
    const value = JSON.stringify(error.data === undefined ? "undefined" : error.data);
    const join = (list) => list.filter(Boolean).join("").trim();
    error.dataPath = error.dataPath ? error.dataPath.replace(/\//gi, ".") : error.dataPath;
    const [, indexPath, ...paths] = error.dataPath.split(".");
    const deepPaths = paths.length ? "." + paths.join(".") : "";
    if (error.collectionName) {
        switch (error.collectionName) {
            case "Array":
                return join([`${error.modelName || ""}[${indexPath}]${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
            case "Map":
                return join([`Map<${indexPath}, ${error.modelName || ""}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
            case "Set":
                return join([`Set<${indexPath}, ${error.modelName || ""}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
        }
    }
    return join([!error.modelName && "Value", `${error.modelName || ""}`, error.dataPath, ` ${error.message}. Given value: ${value}`]);
}
let AjvService = class AjvService {
    async validate(value, { schema, type, collectionType, ...options }) {
        schema = schema || schema_1.getJsonSchema(type, { ...options, customKeys: true });
        if (schema) {
            const valid = await this.ajv.validate(schema, value);
            if (!valid) {
                throw this.mapErrors(this.ajv.errors || [], {
                    type,
                    collectionType,
                    async: true,
                    value
                });
            }
        }
        return value;
    }
    mapErrors(errors, options) {
        const { type, collectionType, value } = options;
        const message = errors
            .map((error) => {
            if (collectionType) {
                error.collectionName = core_1.nameOf(collectionType);
            }
            if (!error.data) {
                if (error.dataPath) {
                    error.data = core_1.getValue(error.dataPath.replace(/^./, ""), value);
                }
                else if (error.schemaPath !== "#/required") {
                    error.data = value;
                }
            }
            if (error.dataPath && error.dataPath.match(/pwd|password|mdp|secret/)) {
                error.data = "[REDACTED]";
            }
            if (type) {
                error.modelName = core_1.nameOf(type);
                error.message = this.mapClassError(error, type);
            }
            return this.errorFormatter.call(this, error, {});
        })
            .join("\n");
        return new AjvValidationError_1.AjvValidationError(message, errors);
    }
    mapClassError(error, targetType) {
        const propertyKey = core_1.getValue(error, "params.missingProperty");
        if (propertyKey) {
            const store = schema_1.JsonEntityStore.from(core_1.prototypeOf(targetType), propertyKey);
            if (store) {
                core_1.setValue(error, "params.missingProperty", store.name || propertyKey);
                return error.message.replace(`'${propertyKey}'`, `'${store.name || propertyKey}'`);
            }
        }
        return error.message;
    }
};
tslib_1.__decorate([
    di_1.Constant("ajv.errorFormatter", defaultFormatter),
    tslib_1.__metadata("design:type", Function)
], AjvService.prototype, "errorFormatter", void 0);
tslib_1.__decorate([
    di_1.Inject(),
    tslib_1.__metadata("design:type", ajv_1.default)
], AjvService.prototype, "ajv", void 0);
AjvService = tslib_1.__decorate([
    di_1.Injectable()
], AjvService);
exports.AjvService = AjvService;
//# sourceMappingURL=AjvService.js.map