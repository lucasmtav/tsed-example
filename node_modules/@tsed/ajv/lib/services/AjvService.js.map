{"version":3,"file":"AjvService.js","sourceRoot":"","sources":["../../src/services/AjvService.ts"],"names":[],"mappings":"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","sourcesContent":["import {getValue, nameOf, prototypeOf, setValue, Type} from \"@tsed/core\";\nimport {Constant, Inject, Injectable} from \"@tsed/di\";\nimport {getJsonSchema, JsonEntityStore} from \"@tsed/schema\";\nimport Ajv, {ErrorObject} from \"ajv\";\nimport {AjvValidationError} from \"../errors/AjvValidationError\";\nimport {AjvErrorObject, ErrorFormatter} from \"../interfaces/IAjvSettings\";\nimport \"./Ajv\";\n\nfunction defaultFormatter(error: AjvErrorObject) {\n  const value = JSON.stringify(error.data === undefined ? \"undefined\" : error.data);\n  const join = (list: any[]): string => list.filter(Boolean).join(\"\").trim();\n  error.dataPath = error.dataPath ? error.dataPath.replace(/\\//gi, \".\") : error.dataPath;\n\n  const [, indexPath, ...paths] = error.dataPath.split(\".\");\n  const deepPaths = paths.length ? \".\" + paths.join(\".\") : \"\";\n\n  if (error.collectionName) {\n    switch (error.collectionName) {\n      case \"Array\":\n        return join([`${error.modelName || \"\"}[${indexPath}]${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n      case \"Map\":\n        return join([`Map<${indexPath}, ${error.modelName || \"\"}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n      case \"Set\":\n        return join([`Set<${indexPath}, ${error.modelName || \"\"}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n    }\n  }\n\n  return join([!error.modelName && \"Value\", `${error.modelName || \"\"}`, error.dataPath, ` ${error.message}. Given value: ${value}`]);\n}\n\n@Injectable()\nexport class AjvService {\n  @Constant(\"ajv.errorFormatter\", defaultFormatter)\n  protected errorFormatter: ErrorFormatter;\n\n  @Inject()\n  protected ajv: Ajv;\n\n  async validate(value: any, {schema, type, collectionType, ...options}: any) {\n    schema = schema || getJsonSchema(type, {...options, customKeys: true});\n\n    if (schema) {\n      const valid = await this.ajv.validate(schema, value);\n      if (!valid) {\n        throw this.mapErrors(this.ajv.errors || [], {\n          type,\n          collectionType,\n          async: true,\n          value\n        });\n      }\n    }\n\n    return value;\n  }\n\n  protected mapErrors(errors: ErrorObject[], options: any) {\n    const {type, collectionType, value} = options;\n\n    const message = errors\n      .map((error: AjvErrorObject) => {\n        if (collectionType) {\n          error.collectionName = nameOf(collectionType);\n        }\n\n        if (!error.data) {\n          if (error.dataPath) {\n            error.data = getValue(error.dataPath.replace(/^./, \"\"), value);\n          } else if (error.schemaPath !== \"#/required\") {\n            error.data = value;\n          }\n        }\n\n        if (error.dataPath && error.dataPath.match(/pwd|password|mdp|secret/)) {\n          error.data = \"[REDACTED]\";\n        }\n\n        if (type) {\n          error.modelName = nameOf(type);\n          error.message = this.mapClassError(error, type);\n        }\n\n        return this.errorFormatter.call(this, error, {});\n      })\n      .join(\"\\n\");\n\n    return new AjvValidationError(message, errors);\n  }\n\n  protected mapClassError(error: AjvErrorObject, targetType: Type<any>) {\n    const propertyKey = getValue(error, \"params.missingProperty\");\n\n    if (propertyKey) {\n      const store = JsonEntityStore.from<JsonEntityStore>(prototypeOf(targetType), propertyKey);\n\n      if (store) {\n        setValue(error, \"params.missingProperty\", store.name || propertyKey);\n\n        return error.message!.replace(`'${propertyKey}'`, `'${store.name || propertyKey}'`);\n      }\n    }\n\n    return error.message;\n  }\n}\n"]}