{"version":3,"file":"PassportMiddleware.js","sourceRoot":"","sources":["../../src/middlewares/PassportMiddleware.ts"],"names":[],"mappings":";;;;;AAAA,yCAA0E;AAC1E,qCAAuC;AACvC,iDAAyD;AACzD,gEAAgC;AAChC,mEAA8D;AAC9D,mEAA8D;AAC9D,8EAAyE;AAGzE,IAAa,kBAAkB,0BAA/B,MAAa,kBAAkB;IAI7B,UAAU,CAAC,GAAY;QACrB,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACjC,OAAO,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,eAAe,EAAE,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,GAAG,CAAY,GAAY;QAC/B,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;QAC9B,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAEjC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACxB,OAAO;SACR;QAED,MAAM,EAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,GAAG,IAAI,EAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAkB,CAAC,CAAC;QAC/F,MAAM,SAAS,GAAG,iDAAuB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAExG,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,yBAAY,CAAC,gBAAgB,CAAC,CAAC;SAC1C;QAED,IAAI,WAAW,EAAE;YACf,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC;SACnC;QAED,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IAES,UAAU,CAAC,EAAO;QAC1B,IAAI,CAAC,kBAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACpC,MAAM,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;SACjC;QAED,MAAM,EAAE,CAAC;IACX,CAAC;IAEO,KAAK,CAAC,IAAI,CAAC,MAAW,EAAE,SAAmB,EAAE,OAAY,EAAE,GAAoB;QACrF,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACjC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QAEnC,IAAI;YACF,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;YAC7B,aAAa;YACb,MAAM,UAAU,GAAG,kBAAQ,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAEhG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACpC,UAAU,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,GAAQ,EAAE,EAAE;oBACzC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gBAChC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,EAAE,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SACrB;IACH,CAAC;CACF,CAAA;AAvDC;IADC,eAAM,CAAC,mCAAgB,CAAC;sCACP,mCAAgB;4DAAC;AAOnC;IAAW,mBAAA,gBAAO,EAAE,CAAA;;;;6CAoBnB;AA7BU,kBAAkB;IAD9B,mBAAU,EAAE;GACA,kBAAkB,CAyD9B;AAzDY,gDAAkB","sourcesContent":["import {Context, Inject, Middleware, PlatformContext} from \"@tsed/common\";\nimport {ancestorsOf} from \"@tsed/core\";\nimport {Exception, Unauthorized} from \"@tsed/exceptions\";\nimport Passport from \"passport\";\nimport {PassportException} from \"../errors/PassportException\";\nimport {ProtocolsService} from \"../services/ProtocolsService\";\nimport {getProtocolsFromRequest} from \"../utils/getProtocolsFromRequest\";\n\n@Middleware()\nexport class PassportMiddleware {\n  @Inject(ProtocolsService)\n  protocolsService: ProtocolsService;\n\n  shouldSkip(ctx: Context) {\n    const request = ctx.getRequest();\n    return request.user && request.isAuthenticated();\n  }\n\n  async use(@Context() ctx: Context) {\n    const endpoint = ctx.endpoint;\n    const request = ctx.getRequest();\n\n    if (this.shouldSkip(ctx)) {\n      return;\n    }\n\n    const {options, protocol, method, originalUrl = true} = endpoint.store.get(PassportMiddleware);\n    const protocols = getProtocolsFromRequest(request, protocol, this.protocolsService.getProtocolsNames());\n\n    if (protocols.length === 0) {\n      throw new Unauthorized(\"Not authorized\");\n    }\n\n    if (originalUrl) {\n      request.url = request.originalUrl;\n    }\n\n    await this.call(method, protocols, options, ctx);\n  }\n\n  protected catchError(er: any) {\n    if (!ancestorsOf(er).includes(Error)) {\n      throw new PassportException(er);\n    }\n\n    throw er;\n  }\n\n  private async call(method: any, protocols: string[], options: any, ctx: PlatformContext) {\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n\n    try {\n      options.failWithError = true;\n      // @ts-ignore\n      const middleware = Passport[method](protocols.length === 1 ? protocols[0] : protocols, options);\n\n      await new Promise((resolve, reject) => {\n        middleware(request, response, (err: any) => {\n          err ? reject(err) : resolve();\n        });\n      });\n    } catch (er) {\n      this.catchError(er);\n    }\n  }\n}\n"]}