{"version":3,"file":"LocalsContainer.js","sourceRoot":"","sources":["../../src/class/LocalsContainer.ts"],"names":[],"mappings":";;;AAEA,MAAa,eAAmB,SAAQ,GAAqB;IAC3D;;;;;OAKG;IACI,KAAK,CAAC,IAAI,CAAC,SAAiB,EAAE,GAAG,IAAW;QACjD,MAAM,SAAS,GAAU,IAAI,CAAC,OAAO,EAAE,CAAC;QAExC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,QAAQ,EAAE;gBACrE,MAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACpC;SACF;IACH,CAAC;IAEM,KAAK,CAAU,SAAiB,EAAE,KAAU,EAAE,GAAG,IAAW;QACjE,MAAM,SAAS,GAAU,IAAI,CAAC,OAAO,EAAE,CAAC;QAExC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,QAAQ,EAAE;gBACrE,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aAC7C;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,UAAU,CAAU,SAAiB,EAAE,KAAU,EAAE,GAAG,IAAW;QAC5E,MAAM,SAAS,GAAU,IAAI,CAAC,OAAO,EAAE,CAAC;QAExC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,QAAQ,EAAE;gBACrE,KAAK,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aACnD;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;CACF;AAjDD,0CAiDC","sourcesContent":["import {TokenProvider} from \"../interfaces/TokenProvider\";\n\nexport class LocalsContainer<V> extends Map<TokenProvider, V> {\n  /**\n   * Emit an event to all service. See service [lifecycle hooks](/docs/services.md#lifecycle-hooks).\n   * @param eventName The event name to emit at all services.\n   * @param args List of the parameters to give to each services.\n   * @returns {Promise<any[]>} A list of promises.\n   */\n  public async emit(eventName: string, ...args: any[]) {\n    const instances: any[] = this.toArray();\n\n    for (const instance of instances) {\n      if (typeof instance === \"object\" && instance && eventName in instance) {\n        await instance[eventName](...args);\n      }\n    }\n  }\n\n  public alter<T = any>(eventName: string, value: any, ...args: any[]): T {\n    const instances: any[] = this.toArray();\n\n    for (const instance of instances) {\n      if (typeof instance === \"object\" && instance && eventName in instance) {\n        value = instance[eventName](value, ...args);\n      }\n    }\n\n    return value;\n  }\n\n  public async alterAsync<T = any>(eventName: string, value: any, ...args: any[]): Promise<T> {\n    const instances: any[] = this.toArray();\n\n    for (const instance of instances) {\n      if (typeof instance === \"object\" && instance && eventName in instance) {\n        value = await instance[eventName](value, ...args);\n      }\n    }\n\n    return value;\n  }\n\n  toArray() {\n    return Array.from(this.values());\n  }\n\n  async destroy() {\n    await this.emit(\"$onDestroy\");\n    this.clear();\n  }\n}\n"]}