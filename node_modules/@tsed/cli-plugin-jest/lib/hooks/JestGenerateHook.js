"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JestGenerateHook = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const templateDir_1 = require("../utils/templateDir");
const normalizePath = require("normalize-path");
let JestGenerateHook = class JestGenerateHook {
    onGenerateExec(ctx) {
        const { symbolPath } = ctx;
        const { specTemplate, integrationTemplate, relativeSrcPath } = this.mapOptions(ctx);
        return [
            {
                title: `Generate ${ctx.type} spec file to '${symbolPath}.spec.ts'`,
                enabled() {
                    return !(ctx.type === "server" || ctx.type.includes(":connection"));
                },
                task: () => this.srcRenderService.render(specTemplate, Object.assign(Object.assign({}, ctx), { relativeSrcPath }), {
                    output: `${symbolPath}.spec.ts`,
                    templateDir: templateDir_1.TEMPLATE_DIR
                })
            },
            {
                title: `Generate ${ctx.type} integration file '${symbolPath}.integration.spec.ts'`,
                enabled() {
                    return ["controller", "server"].includes(ctx.type);
                },
                task: () => this.srcRenderService.render(integrationTemplate, Object.assign(Object.assign({}, ctx), { relativeSrcPath }), {
                    output: `${symbolPath}.integration.spec.ts`,
                    templateDir: templateDir_1.TEMPLATE_DIR
                })
            }
        ];
    }
    mapOptions(options) {
        const type = [options.type, options.templateType].filter(Boolean).join(".");
        const specTemplate = this.srcRenderService.templateExists(`generate/${type}.spec.hbs`, { templateDir: templateDir_1.TEMPLATE_DIR })
            ? `generate/${type}.spec.hbs`
            : "generate/generic.spec.hbs";
        const integrationTemplate = this.srcRenderService.templateExists(`generate/${type}.integration.hbs`, { templateDir: templateDir_1.TEMPLATE_DIR })
            ? `generate/${type}.integration.hbs`
            : "generate/generic.integration.hbs";
        return {
            specTemplate,
            integrationTemplate,
            relativeSrcPath: normalizePath(this.srcRenderService.relativeFrom(`${options.symbolPath}.integration.spec.ts`))
        };
    }
};
tslib_1.__decorate([
    cli_core_1.Inject(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], JestGenerateHook.prototype, "srcRenderService", void 0);
tslib_1.__decorate([
    cli_core_1.OnExec("generate"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Array)
], JestGenerateHook.prototype, "onGenerateExec", null);
JestGenerateHook = tslib_1.__decorate([
    cli_core_1.Injectable()
], JestGenerateHook);
exports.JestGenerateHook = JestGenerateHook;
//# sourceMappingURL=JestGenerateHook.js.map