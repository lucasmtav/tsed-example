{"version":3,"file":"TestMongooseContext.js","sourceRoot":"","sources":["../src/TestMongooseContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {PlatformTest} from \"@tsed/common\";\nimport {MongooseService} from \"@tsed/mongoose\";\nimport {MongoMemoryServer} from \"mongodb-memory-server\";\nimport {resolve} from \"path\";\n\nconst downloadDir = resolve(`${require.resolve(\"mongodb-memory-server\")}/../../.cache/mongodb-memory-server/mongodb-binaries`);\n\nexport class TestMongooseContext extends PlatformTest {\n  static getMongo(): MongoMemoryServer {\n    // @ts-ignore\n    return global.__MONGOD__;\n  }\n\n  static async install(options: any = {binary: {}}) {\n    if (!TestMongooseContext.getMongo()) {\n      // @ts-ignore\n      global.__MONGOD__ = new MongoMemoryServer({\n        ...options,\n        binary: {\n          ...(options.binary || {}),\n          downloadDir\n        }\n      });\n    }\n\n    return TestMongooseContext.getMongooseOptions();\n  }\n\n  /**\n   * Connect to the in-memory database.\n   */\n  static bootstrap(mod: any, options: Partial<TsED.Configuration> = {}): () => Promise<void> {\n    return async function before(): Promise<void> {\n      const config = await TestMongooseContext.install(options.mongod);\n      const mongod = TestMongooseContext.getMongo();\n\n      // istanbul ignore next\n      if (!mongod.runningInstance) {\n        await mongod.start();\n      }\n\n      const before = PlatformTest.bootstrap(mod, {\n        ...options,\n        mongoose: config\n      });\n\n      await before();\n    };\n  }\n\n  static async create(options: Partial<TsED.Configuration> = {}) {\n    options.mongoose = await TestMongooseContext.install(options.mongod);\n\n    return PlatformTest.create(options);\n  }\n\n  /**\n   * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.\n   */\n  static async reset() {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    await PlatformTest.reset();\n    await TestMongooseContext.getMongo().stop();\n  }\n\n  /**\n   *\n   */\n  static async clearDatabase() {\n    const mongooseService = PlatformTest.get<MongooseService>(MongooseService);\n    const promises: any[] = [];\n\n    for (const connection of mongooseService.connections.values()) {\n      promises.push(...Object.values(connection.collections).map((collection) => collection.deleteMany({})));\n    }\n\n    await Promise.all(promises);\n  }\n\n  static async getMongooseOptions() {\n    const url = await TestMongooseContext.getMongo().getUri();\n\n    return {\n      url,\n      connectionOptions: {\n        useUnifiedTopology: true,\n        useNewUrlParser: true\n      }\n    };\n  }\n}\n"]}