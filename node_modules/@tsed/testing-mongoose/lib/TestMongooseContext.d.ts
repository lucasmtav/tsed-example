import { PlatformTest } from "@tsed/common";
import { MongoMemoryServer } from "mongodb-memory-server";
export declare class TestMongooseContext extends PlatformTest {
    static getMongo(): MongoMemoryServer;
    static install(options?: any): Promise<{
        url: string;
        connectionOptions: {
            useUnifiedTopology: boolean;
            useNewUrlParser: boolean;
        };
    }>;
    /**
     * Connect to the in-memory database.
     */
    static bootstrap(mod: any, options?: Partial<TsED.Configuration>): () => Promise<void>;
    static create(options?: Partial<TsED.Configuration>): Promise<void>;
    /**
     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.
     */
    static reset(): Promise<void>;
    /**
     *
     */
    static clearDatabase(): Promise<void>;
    static getMongooseOptions(): Promise<{
        url: string;
        connectionOptions: {
            useUnifiedTopology: boolean;
            useNewUrlParser: boolean;
        };
    }>;
}
